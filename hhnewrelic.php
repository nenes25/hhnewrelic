<?php
/**
 * 2007-2025 PrestaShop
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 *
 *
 * @author    yourName
 * @copyright 2007-2025
 * @license   http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 *
 * @generated by PrestashopConsole  / copyright 2016-2025 Hennes Hervé http://www.h-hennes.fr/blog/
 */

if (!defined('_PS_VERSION_')) {
    exit;
}

class Hhnewrelic extends Module
{

    /**
     * Préfixe de configuration
     * @var string
     */
    private $configPrefix;

    public function __construct()
    {
        $this->name = 'hhnewrelic';
        $this->tab = 'others';
        $this->version = '0.1.0';
        $this->author = 'hhennes';
        $this->bootstrap = true;
        parent::__construct();

        $this->displayName = $this->l('Hh New Relic');
        $this->description = $this->l('Optimize New Relic monitoring for Prestashop');
        $this->ps_versions_compliancy = array('min' => '1.7.8.0', 'max' => _PS_VERSION_);
        $this->configPrefix = 'NR_NAMER_';
    }


    public function install()
    {
        return parent::install()
            && $this->registerHook('displayHeader')
            && Configuration::updateValue($this->configPrefix . 'ENABLED', true)
            && Configuration::updateValue($this->configPrefix . 'PATTERN', '{controller}/{action}')
            && Configuration::updateValue($this->configPrefix . 'WHITELIST', '')
            && Configuration::updateValue($this->configPrefix . 'BLACKLIST', '')
            && Configuration::updateValue($this->configPrefix . 'SANITIZE', true);
    }

    public function uninstall()
    {
        Configuration::deleteByName($this->configPrefix . 'ENABLED');
        Configuration::deleteByName($this->configPrefix . 'PATTERN');
        Configuration::deleteByName($this->configPrefix . 'WHITELIST');
        Configuration::deleteByName($this->configPrefix . 'BLACKLIST');
        Configuration::deleteByName($this->configPrefix . 'SANITIZE');

        return parent::uninstall();
    }

    /**
     * Hook executed on front pages (header). Try to name the transaction as early as possible.
     */
    public function hookDisplayHeader($params)
    {
        if (!Configuration::get($this->configPrefix . 'ENABLED')) {
            return;
        }

        if (!extension_loaded('newrelic')) {
            // nothing to do
            return;
        }

        $info = $this->gatherRouteInfo();

        // Apply blacklist/whitelist
        $controller = isset($info['controller']) ? $info['controller'] : '';
        $blacklist = $this->csvToArray(Configuration::get($this->configPrefix . 'BLACKLIST'));
        if (!empty($blacklist) && in_array($controller, $blacklist)) {
            return;
        }
        $whitelist = $this->csvToArray(Configuration::get($this->configPrefix . 'WHITELIST'));
        if (!empty($whitelist) && !in_array($controller, $whitelist)) {
            // controller not in whitelist => skip
            return;
        }

        $pattern = Configuration::get($this->configPrefix . 'PATTERN') ?: '{controller}/{action}';
        $name = $this->applyPattern($pattern, $info);

        if (Configuration::get($this->configPrefix . 'SANITIZE')) {
            $name = $this->sanitizeName($name);
        }

        // finally name the transaction
        if (!empty($name)) {
            // use the extension function
            if (function_exists('newrelic_name_transaction')) {
                newrelic_name_transaction($name);
            }

            // Optionally add controller/action as custom parameters for filtering
            if (function_exists('newrelic_add_custom_parameter')) {
                if (!empty($controller)) {
                    newrelic_add_custom_parameter('controller', $controller);
                }
                if (!empty($info['action'])) {
                    newrelic_add_custom_parameter('action', $info['action']);
                }
            }
        }
    }

    /**
     * Build a small array with route/controller/action/uri based on PrestaShop context.
     * Supports legacy controllers and attempts to detect Symfony routes when possible.
     */
    protected function gatherRouteInfo()
    {
        $res = array(
            'controller' => null,
            'action' => null,
            'route' => null,
            'uri' => null,
        );

        // Request URI
        if (!empty($_SERVER['REQUEST_URI'])) {
            $res['uri'] = preg_replace('/\?.*$/', '', $_SERVER['REQUEST_URI']);
        }

        // Try legacy controller name
        try {
            if (isset($this->context) && isset($this->context->controller)) {
                $ctrl = $this->context->controller;
                // php_self is common in PS 1.7
                if (!empty($ctrl->php_self)) {
                    $res['controller'] = (string)$ctrl->php_self;
                }
                // controller_name exists on some controllers
                if (empty($res['controller']) && !empty($ctrl->controller_name)) {
                    $res['controller'] = (string)$ctrl->controller_name;
                }

                // full action name (some themes/modules add it)
                if (method_exists($ctrl, 'getFullActionName')) {
                    $res['action'] = $ctrl->getFullActionName();
                }

                // action fallback
                if (empty($res['action']) && !empty($_GET['action'])) {
                    $res['action'] = (string)$_GET['action'];
                }
            }
        } catch (Exception $e) {
            // ignore
        }

        // Try Symfony request (PS 1.7.6+ with Symfony front)
        if (empty($res['controller']) && class_exists('\Symfony\Component\HttpFoundation\Request')) {
            try {
                if (!empty($_SERVER['REQUEST_URI'])) {
                    // best-effort: use the first path segment
                    $parts = explode('/', trim(parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH), '/'));
                    if (!empty($parts[0])) {
                        $res['controller'] = $parts[0];
                    }
                }
            } catch (Exception $e) {
            }
        }

        // fallback to URI as name
        if (empty($res['controller']) && !empty($res['uri'])) {
            // take first segment
            $parts = explode('/', trim($res['uri'], '/'));
            $res['controller'] = isset($parts[0]) ? $parts[0] : 'home';
        }

        // Normalize
        foreach ($res as $k => $v) {
            if (is_string($v)) {
                $res[$k] = trim(strtolower($v));
            }
        }

        return $res;
    }

    protected function applyPattern($pattern, array $info)
    {
        $replacements = array(
            '{controller}' => isset($info['controller']) ? $info['controller'] : '',
            '{action}' => isset($info['action']) ? $info['action'] : '',
            '{route}' => isset($info['route']) ? $info['route'] : '',
            '{uri}' => isset($info['uri']) ? $info['uri'] : '',
        );

        $name = strtr($pattern, $replacements);

        // remove duplicate slashes and trim
        $name = preg_replace('#/+#', '/', $name);
        $name = trim($name, '/');

        return $name ?: null;
    }

    /**
     * Reduce variability: keep only alphanum, underscores and slashes, limit length and parts.
     */
    protected function sanitizeName($name)
    {
        // replace spaces and other chars
        $name = preg_replace('#[^a-z0-9_\/-]#', '-', $name);

        // collapse multiple dashes
        $name = preg_replace('#-+#', '-', $name);

        // limit length to 80 chars
        if (strlen($name) > 80) {
            $name = substr($name, 0, 80);
        }

        // limit segments to 4 (e.g. controller/action/arg)
        $parts = explode('/', $name);
        if (count($parts) > 4) {
            $parts = array_slice($parts, 0, 4);
            $name = implode('/', $parts);
        }

        return trim($name, '-/');
    }

    protected function csvToArray($csv)
    {
        if (empty($csv)) {
            return array();
        }
        $items = array_map('trim', explode(',', $csv));
        $items = array_filter($items, function ($v) {
            return $v !== '';
        });
        return $items;
    }

    /**
     * Gestion de l'affichage du formulaire
     * @return string
     */
    public function renderForm(): string
    {
        $fields_form = [
            'form' => [
                'legend' => [
                    'title' => $this->l('NewRelic naming'),
                    'icon' => 'icon-cogs',
                ],
                'input' => [
                    [
                        'type' => 'switch',
                        'label' => $this->l('Enable naming'),
                        'name' => $this->configPrefix . 'ENABLED',
                        'is_bool' => true,
                        'values' => [
                            [
                                'id' => 'active_on',
                                'value' => 1,
                                'label' => $this->l('Enabled')
                            ],
                            [
                                'id' => 'active_off',
                                'value' => 0,
                                'label' => $this->l('Disabled')
                            ]
                        ],
                    ],
                    [
                        'type' => 'text',
                        'label' => $this->l('Pattern'),
                        'name' => $this->configPrefix . 'PATTERN',
                        'hint' => $this->l('Available placeholders: {controller}, {action}, {route}, {uri}')
                    ],
                    [
                        'type' => 'text',
                        'label' => $this->l('Whitelist (comma separated controllers)'),
                        'name' => $this->configPrefix . 'WHITELIST',
                    ],
                    [
                        'type' => 'text',
                        'label' => $this->l('Blacklist (comma separated controllers)'),
                        'name' => $this->configPrefix . 'BLACKLIST',
                    ],
                    [
                        'type' => 'switch',
                        'label' => $this->l('Sanitize transaction name'),
                        'name' => $this->configPrefix . 'SANITIZE',
                        'is_bool' => true,
                        'values' => [
                            [
                                'id' => 'sanitize_on',
                                'value' => 1,
                                'label' => $this->l('Yes')
                            ],
                            [
                                'id' => 'sanitize_off',
                                'value' => 0,
                                'label' => $this->l('No')
                            ]
                        ],
                        'hint' => $this->l('Strip special chars and limit length')
                    ],
                ],
                'submit' => [
                    'title' => $this->l('Save'),
                    'class' => 'button btn btn-default pull-right',
                ],
            ],
        ];

        $helper = new HelperForm();
        $helper->show_toolbar = false;
        $lang = new Language((int)Configuration::get('PS_LANG_DEFAULT'));
        $helper->default_form_language = $lang->id;
        $helper->allow_employee_form_lang = Configuration::get('PS_BO_ALLOW_EMPLOYEE_FORM_LANG') ?
            Configuration::get('PS_BO_ALLOW_EMPLOYEE_FORM_LANG') : 0;
        $helper->id = $this->name;
        $helper->submit_action = 'SubmitModuleConfiguration';
        $helper->currentIndex = $this->context->link->getAdminLink('AdminModules', false)
            . '&configure=' . $this->name . '&tab_module=' . $this->tab . '&module_name=' . $this->name;
        $helper->token = Tools::getAdminTokenLite('AdminModules');
        $helper->tpl_vars = [
            'fields_value' => $this->getConfigFieldsValues(),
            'languages' => $this->context->controller->getLanguages(),
            'id_language' => $this->context->language->id,
        ];

        return $helper->generateForm([$fields_form]);
    }

    /**
     * Traitement du formulaire
     * @return string|void
     */
    public function postProcess()
    {
        if (Tools::isSubmit('SubmitModuleConfiguration')) {
            Configuration::updateValue($this->configPrefix . 'ENABLED', (bool)Tools::getValue($this->configPrefix . 'ENABLED'));
            Configuration::updateValue($this->configPrefix . 'PATTERN', Tools::getValue($this->configPrefix . 'PATTERN'));
            Configuration::updateValue($this->configPrefix . 'WHITELIST', Tools::getValue($this->configPrefix . 'WHITELIST'));
            Configuration::updateValue($this->configPrefix . 'BLACKLIST', Tools::getValue($this->configPrefix . 'BLACKLIST'));
            Configuration::updateValue($this->configPrefix . 'SANITIZE', (bool)Tools::getValue($this->configPrefix . 'SANITIZE'));
            return $this->displayConfirmation($this->l('Settings updated'));
        }
    }

    /**
     * Récupération des valeurs de configuration du formulaire
     * @return array
     */
    public function getConfigFieldsValues(): array
    {
        return [
            $this->configPrefix . 'ENABLED' => Tools::getValue($this->configPrefix . 'ENABLED', Configuration::get($this->configPrefix . 'ENABLED')),
            $this->configPrefix . 'PATTERN' => Tools::getValue($this->configPrefix . 'PATTERN', Configuration::get($this->configPrefix . 'PATTERN')),
            $this->configPrefix . 'WHITELIST' => Tools::getValue($this->configPrefix . 'WHITELIST', Configuration::get($this->configPrefix . 'WHITELIST')),
            $this->configPrefix . 'BLACKLIST' => Tools::getValue($this->configPrefix . 'BLACKLIST', Configuration::get($this->configPrefix . 'BLACKLIST')),
            $this->configPrefix . 'SANITIZE' => Tools::getValue($this->configPrefix . 'SANITIZE', Configuration::get($this->configPrefix . 'SANITIZE')),
        ];
    }

    /**
     * Back-office configuration form
     */
    public function getContent()
    {
        $html = '';
        if (!extension_loaded('newrelic')) {
            $html .= $this->displayWarning($this->l('L’extension PHP "newrelic" n’est pas installée ou activée sur ce serveur. Le module ne pourra pas fonctionner correctement.'));
        }
        $html .= $this->postProcess();
        $html .= $this->renderForm();
        return $html;
    }
}
